if (document.querySelectorAll("canvas").length > 1) {
  document.querySelectorAll("canvas")[0].parentElement.children[1].remove()
} //inject Sprites into the game screen by @decmant

let gamecan = document.querySelector("canvas")

let canvas = document.createElement("canvas")

canvas.height = gamecan.height

canvas.width = gamecan.width

canvas.style.height = gamecan.style.height

canvas.style.width = gamecan.style.width

canvas.style.position = "relative"

canvas.style.top = `${0 - Number(gamecan.style.height.match(/\d*/))}px`

canvas.style.left = `0px`

gamecan.parentElement.append(canvas)

let ctx = canvas.getContext("2d")

sprite.visible = false

let lastFrameTime = performance.now()

let fps = 0

let smoothFPS = 0

const screenDimensions = {
  width: 480,

  height: 360,

  halfwidth: 240,

  halfheight: 180,
}

let zBuffer = new Float32Array(screenDimensions.width * screenDimensions.height)

enum levels {
  castle_grounds,

  inside_castle,
}

let level = levels.castle_grounds

let skybox = new Image()

updateSkyBox()

const camera = {
  x: 0,

  y: 7,

  z: -12,

  yaw: 0, // Drehung um die Y-Achse (in Grad oder Radian)

  pitch: 0, // Drehung um die X-Achse
}

let horizontalSpeed = 0

let playerRotation = 0

const moveSpeed = 0.1

const rotationSpeed = -2 // In Radian

const projectionDistance = 1

function project(vertex: Vector3): { x: number; y: number; z: number } | null {
  let worldX = vertex.x - camera.x

  let worldY = vertex.y - camera.y

  let worldZ = vertex.z - camera.z

  // Rotation um die Y-Achse (Yaw)

  const yawInRadians = camera.yaw

  const cosYaw = Math.cos(yawInRadians)

  const sinYaw = Math.sin(yawInRadians)

  const rotatedX = cosYaw * worldX + sinYaw * worldZ

  const rotatedZ = -sinYaw * worldX + cosYaw * worldZ

  worldX = rotatedX

  worldZ = rotatedZ

  // Rotation um die X-Achse (Pitch)

  const pitchInRadians = camera.pitch

  const cosPitch = Math.cos(pitchInRadians)

  const sinPitch = Math.sin(pitchInRadians)

  const rotatedY = cosPitch * worldY - sinPitch * worldZ

  const rotatedZ2 = sinPitch * worldY + cosPitch * worldZ

  worldY = rotatedY

  worldZ = rotatedZ2

  // Vermeide Division durch Null und Clipping von Punkten sehr nah an der Kamera

  if (worldZ <= 0.95) {
    return null
  }

  // Perspektivische Division

  const screenX = (projectionDistance * worldX) / worldZ

  const screenY = (projectionDistance * worldY) / worldZ

  const canvasX =
    screenDimensions.halfwidth + screenX * screenDimensions.halfwidth

  const canvasY =
    screenDimensions.halfheight - screenY * screenDimensions.halfheight

  return {
    x: canvasX,

    y: canvasY,

    z: worldZ,
  }
}

function drawTriangleProjected(triangle: Triangle) {
  const projectedVertices = triangle.vertices.map(project)

  // Zeichne Linien zwischen den projizierten Vertices

  drawLine(
    Math.round(projectedVertices[0].x),

    Math.round(projectedVertices[0].y),

    Math.round(projectedVertices[1].x),

    Math.round(projectedVertices[1].y),

    projectedVertices[0].z, // Durchschnittliche Z-Tiefe für den Z-Buffer (kann später verbessert werden)

    triangle.color,
  )

  drawLine(
    Math.round(projectedVertices[1].x),

    Math.round(projectedVertices[1].y),

    Math.round(projectedVertices[2].x),

    Math.round(projectedVertices[2].y),

    projectedVertices[1].z,

    triangle.color,
  )

  drawLine(
    Math.round(projectedVertices[2].x),

    Math.round(projectedVertices[2].y),

    Math.round(projectedVertices[0].x),

    Math.round(projectedVertices[0].y),

    projectedVertices[2].z,

    triangle.color,
  )
}

function drawLine(
  x1: number,

  y1: number,

  x2: number,

  y2: number,

  z: number,

  color: string,
) {
  const dx = Math.abs(x2 - x1)

  const dy = Math.abs(y2 - y1)

  const sx = x1 < x2 ? 1 : -1

  const sy = y1 < y2 ? 1 : -1

  let err = dx - dy

  while (true) {
    setPixel(x1, y1, z, color) // Hier verwenden wir die Z-Tiefe des Startpunkts (kann verbessert werden)

    if (x1 === x2 && y1 === y2) break

    const e2 = 2 * err

    if (e2 > -dy) {
      err -= dy

      x1 += sx
    }

    if (e2 < dx) {
      err += dx

      y1 += sy
    }
  }
}

class Vector3 {
  x: number

  y: number

  z: number

  constructor(x: number = 0, y: number = 0, z: number = 0) {
    this.x = x

    this.y = y

    this.z = z
  }
}

function fillTriangleProjected(triangle: Triangle) {
  const projectedVertices = triangle.vertices.map(project)

  // Sortiere die Vertices nach Y-Koordinate

  projectedVertices.sort((a, b) => a.y - b.y)

  const v1 = projectedVertices[0]

  const v2 = projectedVertices[1]

  const v3 = projectedVertices[2]

  function fillScanline(
    y: number,

    x1: number,

    x2: number,

    z1: number,

    z2: number,

    color: string,
  ) {
    const steps = x2 - x1

    for (let x = x1; x <= x2; x++) {
      const t = (x - x1) / steps

      const z = z1 * (1 - t) + z2 * t // Lineare Interpolation der Z-Tiefe

      setPixel(Math.round(x), Math.round(y), z, color)
    }
  }

  // Hilfsfunktion zum Berechnen von X und Z auf einer Kante für eine gegebene Y-Koordinate

  function interpolate(
    y: number,

    vA: { x: number; y: number; z: number },

    vB: { x: number; y: number; z: number },
  ): { x: number; z: number } | null {
    if (vA.y === vB.y) return null

    const t = (y - vA.y) / (vB.y - vA.y)

    const x = vA.x + t * (vB.x - vA.x)

    const z = vA.z + t * (vB.z - vA.z)

    return { x, z }
  }

  // Durchlaufe die oberen und unteren Hälften des Dreiecks

  for (let y = Math.round(v1.y); y <= Math.round(v3.y); y++) {
    const p1 = interpolate(y, v1, v3)

    let p2: { x: number; z: number } | null = null

    if (y < v2.y) {
      p2 = interpolate(y, v1, v2)
    } else {
      p2 = interpolate(y, v2, v3)
    }

    if (p1 !== null && p2 !== null) {
      if (p1.x < p2.x) {
        fillScanline(y, p1.x, p2.x, p1.z, p2.z, triangle.color)
      } else {
        fillScanline(y, p2.x, p1.x, p2.z, p1.z, triangle.color)
      }
    }
  }
}

class Triangle {
  vertices: [Vector3, Vector3, Vector3]

  color: string

  constructor(v1: Vector3, v2: Vector3, v3: Vector3, color: string = "white") {
    this.vertices = [v1, v2, v3]

    this.color = color
  }
}

function getRandomColor() {
  const letters = "0123456789ABCDEF"

  let color = "#"

  for (let i = 0; i < 6; i++) {
    color += letters[Math.floor(Math.random(0, 1) * 16)]
  }

  return color
}

const modelDataJSON = `

{

  "vertices": [[0.0, 6.4457, -1.5695], [0.0, 8.6788, -1.2114], [1.5064, 8.6667, -0.9957], [-1.5064, 8.6667, -0.9957], [1.5522, 6.4457, -1.3516], [-1.5522, 6.4457, -1.3516], [1.5061, 5.0819, -1.4545], [-1.5061, 5.0819, -1.4907], [0.0, 4.9292, -1.7629], [0.0, 9.9046, 0.0903], [2.3263, 5.5054, -0.0442], [2.3177, 7.0425, -0.119], [2.4035, 6.4457, -0.0714], [-2.3263, 5.5054, -0.0442], [-2.3177, 7.0425, -0.119], [-2.4035, 6.4457, -0.0714], [1.3928, 4.6795, -1.3088], [-1.3928, 4.6795, -1.3088], [0.0872, 4.3384, -0.0714], [-0.0872, 4.3384, -0.0714], [0.0, 4.3667, -0.0714], [1.4374, 9.3063, -0.0905], [-1.4374, 9.3063, -0.0905], [1.6453, 6.4457, 1.6943], [2.2173, 5.114, -0.0714], [1.4708, 4.9142, 1.4404], [-1.6453, 6.4457, 1.6943], [-2.2173, 5.114, -0.0714], [-1.4708, 4.9142, 1.4404], [0.0, 6.4153, 2.4346], [0.0, 4.6881, 2.0218], [1.5544, 8.5543, 0.9285], [-1.5544, 8.5543, 0.9285], [0.0, 8.5228, 1.6284], [1.3929, 3.0189, 1.2216], [0.1164, 3.0217, -0.0947], [2.1942, 3.0217, -0.1517], [0.057, 1.0051, -0.2901], [2.2817, 1.0051, -0.2901], [1.3929, 1.7792, 1.3695], [1.3928, 3.0143, -1.2068], [1.3928, 0.8462, -1.3721], [-1.3929, 3.0189, 1.2216], [-0.1164, 3.0217, -0.0947], [-0.057, 1.0051, -0.2901], [-2.1942, 3.0217, -0.1517], [-1.3929, 1.7792, 1.3695], [-2.2817, 1.0051, -0.2901], [-1.3928, 3.0143, -1.1247], [-1.3928, 0.8462, -1.3721], [3.2205, 9.0222, -0.0257], [1.9499, 9.0827, -0.0822], [1.9793, 8.6316, 0.7998], [1.9857, 8.6316, -0.8596], [3.2205, 8.6316, 0.7042], [3.2205, 8.6316, -0.7307], [4.53, 9.1962, -0.026], [4.53, 8.6316, -0.8895], [4.53, 8.6316, 0.8659], [2.1865, 7.7207, -0.119], [3.2205, 7.7282, -0.0257], [4.53, 7.633, -0.026], [-3.2205, 9.0222, -0.0257], [-1.9793, 8.6316, 0.7998], [-1.9499, 9.0827, -0.0822], [-3.2205, 8.6316, 0.7042], [-1.9857, 8.6316, -0.8596], [-4.53, 9.1962, -0.026], [-3.2205, 8.6316, -0.7307], [-4.53, 8.6316, -0.8895], [-2.1865, 7.7207, -0.119], [-4.53, 8.6316, 0.8659], [-4.53, 7.633, -0.026], [-3.2205, 7.7282, -0.0257], [6.5818, 7.4894, 1.0598], [6.5818, 7.4894, -1.0835], [6.3097, 9.1962, -0.9119], [6.3097, 9.1962, 0.8883], [-6.5818, 7.4894, 1.0598], [-6.5818, 7.4894, -1.0835], [-6.3097, 9.1962, -0.9119], [-6.3097, 9.1962, 0.8883], [-2.3043, 10.4505, 0.1647], [-1.7007, 10.3433, -1.266], [-1.4519, 9.5851, -0.4719], [-1.8026, 11.5598, -1.6954], [-1.499, 9.251, 1.0583], [-2.3337, 11.8938, 0.0529], [-1.8205, 10.5619, 2.1746], [0.0, 11.391, -2.467], [0.0, 10.0904, -1.9391], [-0.8033, 9.719, -1.6702], [-1.6211, 9.6202, -1.5718], [0.0, 9.2406, -0.8199], [-1.8118, 12.6701, 2.0607], [-1.1757, 9.3303, 2.0411], [1.7007, 10.3433, -1.266], [1.8026, 11.5598, -1.6954], [0.0, 9.223, -2.0646], [0.0, 8.9295, 2.1525], [1.499, 9.251, 1.0583], [1.4519, 9.5851, -0.4719], [0.8033, 9.719, -1.6702], [2.3043, 10.4505, 0.1647], [2.3337, 11.8938, 0.0529], [1.1757, 9.3303, 2.0411], [1.8205, 10.5619, 2.1746], [1.8118, 12.6701, 2.0607], [1.6211, 9.6202, -1.5718], [0.0, 15.1104, 2.9613], [0.0, 13.4917, 2.8766], [1.901, 14.2977, 2.2149], [-1.901, 14.2977, 2.2149], [2.2395, 14.3729, 0.5379], [-2.2395, 14.3729, 0.5379], [0.0, 15.413, 1.2782], [1.7292, 13.0029, 2.4377], [-1.7292, 13.0029, 2.4377], [2.6981, 12.4168, -0.7055], [-2.6996, 12.4133, -0.7061], [-2.0022, 12.4478, -2.0709], [2.0022, 12.4478, -2.0709], [0.0, 12.0272, -3.0347], [0.0, 11.2809, 4.3623], [0.9308, 10.3558, 3.7225], [0.9308, 11.1124, 3.7322], [0.0, 10.3005, 4.2246], [0.0, 11.5863, 3.8049], [-0.9308, 10.3558, 3.7225], [-0.9308, 11.1124, 3.7322], [0.0, 9.9813, -0.5236], [0.0, 9.8433, 3.7284], [0.0, 13.1916, -2.6447], [0.0, 13.0036, 4.191], [1.9004, 12.4889, 3.1986], [-1.9004, 12.4889, 3.1986], [0.0, 13.0269, 2.3034], [2.0462, 10.2114, 0.5473], [2.9187, 11.6477, -0.8903], [2.6839, 10.3724, -0.4963], [-2.9187, 11.6477, -0.8903], [-2.0462, 10.2114, 0.5473], [-2.6839, 10.3724, -0.4963], [0.3138, 1.3559, 2.1698], [1.3286, 1.4321, -0.9846], [0.3507, 0.0547, -1.3372], [1.3894, 1.6315, 2.5581], [0.0609, 0.0547, 2.3971], [1.3894, 0.0547, 2.8597], [2.3465, 1.3559, 2.1698], [1.9915, 0.0547, -1.3372], [2.6196, 0.0547, 2.3971], [-0.3138, 1.3559, 2.1698], [-0.3507, 0.0547, -1.3372], [-1.3286, 1.4322, -0.9846], [-0.0609, 0.0547, 2.3971], [-1.3894, 1.6315, 2.5581], [-1.3894, 0.0547, 2.8597], [-2.3465, 1.3559, 2.1698], [-1.9915, 0.0547, -1.3372], [-2.6196, 0.0547, 2.3971], [0.0, 9.3312, 2.5935], [0.0, 8.9295, 2.1525], [1.1757, 9.3303, 2.0411], [-1.1757, 9.3303, 2.0411], [0.0, 10.3687, 2.877], [1.8205, 10.5619, 2.1746], [-1.8205, 10.5619, 2.1746], [0.0, 10.3687, 2.877], [0.0, 13.2046, 2.6091], [-1.8118, 12.6701, 2.0607], [1.8118, 12.6701, 2.0607], [-1.8205, 10.5619, 2.1746], [1.8205, 10.5619, 2.1746]], "faces": [[0, 1, 2], [0, 3, 1], [0, 2, 4], [0, 5, 3], [0, 4, 6], [0, 7, 5], [0, 6, 8], [0, 8, 7], [1, 9, 2], [1, 3, 9], [4, 10, 6], [4, 2, 11], [4, 12, 10], [4, 11, 12], [5, 7, 13], [5, 14, 3], [5, 13, 15], [5, 15, 14], [8, 6, 16], [8, 17, 7], [8, 16, 18], [8, 19, 17], [8, 18, 20], [8, 20, 19], [9, 21, 2], [9, 3, 22], [10, 12, 23], [10, 24, 6], [10, 23, 25], [10, 25, 24], [24, 16, 6], [12, 11, 23], [13, 26, 15], [13, 7, 27], [13, 28, 26], [13, 27, 28], [27, 7, 17], [15, 26, 14], [25, 23, 29], [25, 29, 30], [25, 30, 18], [11, 31, 23], [23, 31, 29], [28, 29, 26], [28, 30, 29], [28, 19, 30], [14, 26, 32], [26, 29, 32], [18, 30, 20], [20, 30, 19], [31, 33, 29], [31, 9, 33], [31, 21, 9], [33, 9, 32], [33, 32, 29], [9, 22, 32], [34, 25, 18], [34, 24, 25], [34, 18, 35], [34, 36, 24], [34, 35, 37], [34, 38, 36], [34, 37, 39], [34, 39, 38], [24, 36, 16], [38, 40, 36], [38, 41, 40], [36, 40, 16], [41, 37, 40], [16, 40, 18], [37, 35, 40], [40, 35, 18], [42, 19, 28], [42, 43, 19], [42, 28, 27], [42, 44, 43], [42, 27, 45], [42, 46, 44], [42, 45, 47], [42, 47, 46], [27, 17, 45], [47, 45, 48], [47, 48, 49], [45, 17, 48], [49, 48, 44], [17, 19, 48], [44, 48, 43], [43, 48, 19], [50, 51, 52], [50, 53, 51], [50, 52, 54], [50, 55, 53], [50, 54, 56], [50, 57, 55], [50, 56, 57], [51, 21, 52], [51, 53, 2], [51, 2, 21], [54, 58, 56], [54, 52, 59], [54, 60, 58], [54, 59, 60], [55, 57, 61], [55, 59, 53], [55, 61, 60], [55, 60, 59], [53, 59, 2], [21, 31, 52], [52, 31, 59], [58, 60, 61], [59, 11, 2], [31, 11, 59], [62, 63, 64], [62, 65, 63], [62, 64, 66], [62, 67, 65], [62, 66, 68], [62, 69, 67], [62, 68, 69], [63, 22, 64], [63, 65, 70], [63, 32, 22], [63, 70, 32], [66, 70, 68], [66, 64, 3], [66, 3, 70], [64, 22, 3], [67, 71, 65], [69, 68, 72], [70, 14, 32], [70, 65, 73], [65, 71, 73], [70, 3, 14], [70, 73, 68], [68, 73, 72], [71, 72, 73], [74, 61, 75], [74, 75, 76], [74, 76, 77], [58, 61, 74], [58, 74, 77], [58, 77, 56], [77, 76, 56], [76, 57, 56], [76, 75, 57], [75, 61, 57], [78, 79, 72], [78, 80, 79], [78, 81, 80], [71, 78, 72], [71, 81, 78], [71, 67, 81], [67, 80, 81], [67, 69, 80], [69, 79, 80], [69, 72, 79], [41, 39, 37], [41, 38, 39], [49, 44, 46], [49, 46, 47], [82, 83, 84], [82, 85, 83], [82, 84, 86], [82, 87, 85], [82, 86, 88], [82, 88, 87], [83, 85, 89], [83, 89, 90], [83, 90, 91], [83, 91, 92], [84, 93, 86], [84, 91, 93], [88, 94, 87], [88, 86, 95], [89, 96, 90], [89, 97, 96], [91, 90, 98], [93, 99, 86], [93, 100, 99], [93, 101, 100], [93, 102, 101], [86, 99, 95], [97, 103, 96], [97, 104, 103], [101, 103, 100], [101, 96, 103], [90, 102, 98], [90, 96, 102], [99, 100, 105], [104, 106, 103], [104, 107, 106], [106, 105, 100], [106, 100, 103], [96, 108, 102], [109, 110, 111], [109, 112, 110], [109, 111, 113], [109, 114, 112], [109, 113, 115], [109, 115, 114], [110, 116, 111], [110, 112, 117], [113, 111, 118], [114, 119, 112], [116, 104, 111], [111, 104, 118], [117, 112, 87], [112, 119, 87], [104, 97, 118], [119, 85, 87], [119, 120, 85], [97, 121, 118], [97, 122, 121], [97, 89, 122], [122, 85, 120], [122, 89, 85], [123, 124, 125], [123, 126, 124], [123, 125, 127], [123, 128, 126], [123, 127, 129], [123, 129, 128], [124, 130, 125], [124, 126, 131], [124, 131, 130], [130, 127, 125], [130, 128, 129], [130, 131, 128], [130, 129, 127], [128, 131, 126], [132, 113, 121], [132, 115, 113], [132, 121, 122], [132, 114, 115], [132, 122, 120], [132, 120, 114], [113, 118, 121], [120, 119, 114], [133, 134, 116], [133, 116, 110], [133, 110, 117], [133, 117, 135], [134, 104, 116], [117, 87, 135], [136, 134, 133], [136, 104, 134], [136, 133, 135], [136, 135, 87], [137, 138, 104], [137, 139, 138], [140, 141, 87], [140, 142, 141], [138, 137, 104], [138, 139, 137], [141, 140, 87], [141, 142, 140], [101, 102, 108], [101, 108, 96], [84, 92, 91], [84, 83, 92], [98, 93, 91], [98, 102, 93], [143, 144, 145], [143, 146, 144], [143, 145, 147], [143, 148, 146], [143, 147, 148], [144, 146, 149], [144, 149, 150], [144, 150, 145], [146, 148, 149], [150, 149, 151], [151, 149, 148], [147, 151, 148], [147, 150, 151], [147, 145, 150], [152, 153, 154], [152, 155, 153], [152, 154, 156], [152, 157, 155], [152, 156, 157], [154, 158, 156], [154, 159, 158], [154, 153, 159], [156, 158, 157], [159, 160, 158], [158, 160, 157], [155, 157, 160], [155, 160, 159], [155, 159, 153], [161, 162, 163], [161, 164, 162], [161, 163, 165], [161, 165, 164], [163, 166, 165], [164, 165, 167], [168, 169, 170], [168, 171, 169], [168, 170, 172], [168, 173, 171]]}

`

const modelData = JSON.parse(modelDataJSON)

const vertices = modelData.vertices

const faces = modelData.faces

const scene: Triangle[] = [] // Initialisiere die Szene als leeres Array

for (const face of faces) {
  if (face.length === 3) {
    const v1 = new Vector3(...vertices[face[0]])

    const v2 = new Vector3(...vertices[face[1]])

    const v3 = new Vector3(...vertices[face[2]])

    const randomColor = getRandomColor() // Generiere eine zufällige Farbe

    const triangle = new Triangle(v1, v2, v3, randomColor) // Verwende die zufällige Farbe

    scene.push(triangle)
  }
}

forever(function () {
  gameLoop()
})

function drawFrame() {
  ctx.clearRect(0, 0, gamecan.width, gamecan.height)

  for (let i = 0; i < zBuffer.length; i++) {
    zBuffer[i] = Infinity
  }

  //drawSkyBox();

  drawFPS()

  // Zeichne unsere 3D-Szene

  scene.forEach((triangle) => {
    fillTriangleProjected(triangle)

    // drawTriangleProjected(triangle); // <---- HIER AUSKOMMENTIEREN ODER LÖSCHEN!
  })
}

// Wir müssen drawFrame jetzt regelmäßig aufrufen, z.B. mit requestAnimationFrame

function gameLoop() {
  updateCamera()

  drawFrame()

  //requestAnimationFrame(gameLoop);
}

function drawSkyBox() {
  const scaleFactor = screenDimensions.height / skybox.height

  ctx.drawImage(
    skybox,

    0,

    0,

    skybox.width * scaleFactor,

    skybox.height * scaleFactor,
  )
}

function setPixel(x: any, y: any, z: any, color: any) {
  if (
    x < 0 ||
    y < 0 ||
    x >= screenDimensions.width ||
    y >= screenDimensions.height
  )
    return

  const index = y * screenDimensions.width + x

  if (z < zBuffer[index]) {
    zBuffer[index] = z

    ctx.fillStyle = color

    ctx.fillRect(x, y, 1, 1)
  }
}

function drawFPS() {
  const now = performance.now()

  const delta = now - lastFrameTime

  lastFrameTime = now

  fps = 1000 / delta

  smoothFPS = smoothFPS * 0.9 + fps * 0.1

  ctx.fillStyle = "black"

  ctx.fillRect(0, 0, 150, 40) // Hintergrund für bessere Lesbarkeit

  ctx.fillStyle = "lime"

  ctx.font = "bold 14px monospace"

  ctx.fillText("FPS: " + Math.round(smoothFPS), 5, 15)

  ctx.fillText(`X: ${camera.x.toFixed(2)}`, 5, 30)

  ctx.fillText(`Y: ${camera.y.toFixed(2)}`, 70, 30)

  ctx.fillText(`Z: ${camera.z.toFixed(2)}`, 135, 30)
}

function updateSkyBox() {
  switch (level) {
    case levels.castle_grounds:
      //Credits: https://www.textures-resource.com/nintendo_64/mario64/texture/1315/

      skybox.src = "https://i.postimg.cc/s2J6Lz4J/castle-grounds.png"

      break
  }
}

function updateCamera() {
  //const yawInRadians = (camera.yaw * Math.PI) / 180;

  horizontalSpeed = 0

  if (Keyboard.keyHeld(Key.Space)) {
    camera.y += moveSpeed
  }

  if (Keyboard.keyHeld(Key.Shift)) {
    camera.y -= moveSpeed
  }

  if (Keyboard.keyHeld(Key.ArrowLeft)) {
    camera.yaw -= rotationSpeed
  }

  if (Keyboard.keyHeld(Key.ArrowRight)) {
    camera.yaw += rotationSpeed
  }

  if (Keyboard.keyHeld(Key.ArrowUp)) {
    camera.pitch -= rotationSpeed
  }

  if (Keyboard.keyHeld(Key.ArrowDown)) {
    camera.pitch += rotationSpeed
  }

  if (Keyboard.keyHeld(Key.W)) {
    horizontalSpeed += moveSpeed

    playerRotation = camera.yaw
  }

  if (Keyboard.keyHeld(Key.A)) {
    horizontalSpeed += moveSpeed

    playerRotation = camera.yaw + 90
  }

  if (Keyboard.keyHeld(Key.S)) {
    horizontalSpeed += moveSpeed

    playerRotation = camera.yaw - 180
  }

  if (Keyboard.keyHeld(Key.D)) {
    horizontalSpeed += moveSpeed

    playerRotation = camera.yaw - 90
  }

  if (horizontalSpeed > 0.2) horizontalSpeed = 0.2

  const dirX = -Math.sin(playerRotation)

  const dirZ = Math.cos(playerRotation)

  camera.x += dirX * horizontalSpeed

  camera.z += dirZ * horizontalSpeed

  // Begrenze den Pitch-Winkel (optional)

  camera.pitch = Math.max(-89, Math.min(89, camera.pitch))
}
 
