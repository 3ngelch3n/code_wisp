sprite.y = 0
sprite.x = 0
const xPixelSize = 2650 / 8 / Game.width
const yPixelSize = 1880 / 8 / Game.height
sprite.visible = true
let ft = 0.1


drawTriangle(-120, -160, 20, 130, 220, 0) ///HIER FEHLT UNTEN EIN GROßeS STÜCK
//drawTriangle(0, 0, 100, 200, 250, -100) //HIER PERFEKT


onCloneStart(function (clone) {
  onMessage("deleteAllClones", function (data) {
    console.log("DELTE")
    clone.delete()
  })
})

onMessage("drawFrame", function (data) {
  const xOff = 0 //Math.random(-100, 100)
  const yOff = 0 //Math.random(-100, 100)
  /*drawTriangle(
    0 + xOff,
    0 + yOff,
    100 + xOff,
    200 + yOff,
    250 + xOff,
    -100 + yOff,
  )*/
  /*const x1 = Math.random(-360, -10)
  const y1 = Math.random(-240, -10)
  const x2 = Math.random(-360, -10)
  const y2 = Math.random(10, 240)
  const x3 = Math.random(10, 360)
  const y3 = Math.random(-240, 240)
  drawTriangle(
    x1 + xOff,
    y1 + yOff,
    x2 + xOff,
    y2 + yOff,
    x3 + yOff,
    y3 + yOff,
  )
  console.log("l:", x1 + xOff,
    y1 + yOff,
    x2 + xOff,
    y2 + yOff,
    x3 + yOff,
    y3 + yOff,)*/
  drawTriangle(-103, -212, -117, 180, 23, -140)
})
//sendMessage("drawFrame")

forever(function () {
  if (Keyboard.keyHeld(Key.A)) {
    ft = 0.05
  } else {
    ft = 0.05
  }
  //sendMessage("deleteAllClones")
  //sendMessage("drawFrame")
  //wait(2)
})

function drawTriangle(
  x1: number,
  y1: number,
  x2: number,
  y2: number,
  x3: number,
  y3: number,
) {
  sprite.layer = 1
  sprite.tint = 0x00aaff
  sprite.setCostume("square_yh")
  /*wait(0)
  drawLine(x1, y1, x2, y2, 2)
  wait(ft)
  drawLine(x2, y2, x3, y3, 2)
  wait(ft)
  drawLine(x1, y1, x3, y3, 2)*/

  sprite.tint = 0x0044ff
  const length_p1p2 = distance({ x: x1, y: y1 }, { x: x2, y: y2 })
  const length_p2p3 = distance({ x: x2, y: y2 }, { x: x3, y: y3 })
  const length_p3p1 = distance({ x: x3, y: y3 }, { x: x1, y: y1 })
  let hypSideP = { x1: 0, y1: 0, x2: 0, y2: 0 }

  if (length_p1p2 >= length_p2p3 && length_p1p2 >= length_p3p1) {
    hypSideP = { x1: x1, y1: y1, x2: x2, y2: y2 }
  } else if (length_p2p3 >= length_p1p2 && length_p2p3 >= length_p3p1) {
    hypSideP = { x1: x2, y1: y2, x2: x3, y2: y3 }
  } else {
    hypSideP = { x1: x3, y1: y3, x2: x1, y2: y1 }
  }

  sprite.layer = 0
  sprite.transparency = 0
  sprite.setCostume("triangle_yh")
  wait(ft)
  if (
    !(
      hypSideP.x1 === x1 &&
      hypSideP.y1 === y1 &&
      hypSideP.x2 === x2 &&
      hypSideP.y2 === y2
    )
  ) {
    trianglePiece(x1, y1, x2, y2, x3, y3, {
      x1: hypSideP.x1,
      y1: hypSideP.y1,
      x2: hypSideP.x2,
      y2: hypSideP.y2,
    })
  }
  wait(ft)
  if (
    !(
      hypSideP.x1 === x2 &&
      hypSideP.y1 === y2 &&
      hypSideP.x2 === x3 &&
      hypSideP.y2 === y3
    )
  ) {
    trianglePiece(x2, y2, x3, y3, x1, y1, {
      x1: hypSideP.x1,
      y1: hypSideP.y1,
      x2: hypSideP.x2,
      y2: hypSideP.y2,
    })
  }
  wait(ft)
  if (
    !(
      hypSideP.x1 === x3 &&
      hypSideP.y1 === y3 &&
      hypSideP.x2 === x1 &&
      hypSideP.y2 === y1
    )
  ) {
    trianglePiece(x3, y3, x1, y1, x2, y2, {
      x1: hypSideP.x1,
      y1: hypSideP.y1,
      x2: hypSideP.x2,
      y2: hypSideP.y2,
    })
  }

  function trianglePiece(
    kath1x: number,
    kath1y: number,
    kath2x: number,
    kath2y: number,
    hypx: number,
    hypy: number,
    hypSidePoints: { x1: number; y1: number; x2: number; y2: number },
  ) {
    const k1 = { x: kath1x, y: kath1y }
    const k2 = { x: kath2x, y: kath2y }
    const roundDown = 0.95
    const kathxm = (kath1x + kath2x) / 2
    const kathym = (kath1y + kath2y) / 2
    sprite.x = kathxm
    sprite.y = kathym
    const angle = angleBetween(k1, k2)
    sprite.rotation = angle
    sprite.tint = 0xff5500
    sprite.layer = 2
    sprite.rotation += 90
    sprite.height = 200
    sprite.layer = 0
    sprite.rotation -= 90
    sprite.tint = 0x0055ff
    sprite.width = distance(k1, k2) * xPixelSize * roundDown
    const hypA = { x: hypSidePoints.x1, y: hypSidePoints.y1 }
    const hypB = { x: hypSidePoints.x2, y: hypSidePoints.y2 }
    const interP = intersectPoint({x: kathxm, y: kathym}, angle, hypA, hypB)
    const dis = ((distance({ x: kathxm, y: kathym }, {x: interP.x, y: interP.y}) /55) *64)
    sprite.height = dis * yPixelSize
    sprite.move(dis / 2 * 0.87)
    sprite.rotation -= 90
    createClone()
  }

  function intersectPoint(
    p: { x: number; y: number },
    angle: number,
    a: { x: number; y: number },
    b: { x: number; y: number },
  ) {
    angle += 90
    const dx1 = b.x - a.x
    const dy1 = b.y - a.y
    const dx2 = Math.sin(angle)
    const dy2 = Math.cos(angle)

    const det = dx2 * dy1 - dy2 * dx1
    if (Math.abs(det) < 1e-10) {
      console.log("PARALLEL")
      Game.stop()
    }

    const s = ((a.x - p.x) * dy1 - (a.y - p.y) * dx1) / det

    const ix = p.x + s * dx2
    const iy = p.y + s * dy2

    return { x: ix, y: iy }
  }
}





/*function drawLine(x1: number, y1: number, x2: number, y2: number, t: number) {
  const p1 = { x: x1, y: y1 }
  const p2 = { x: x2, y: y2 }

  sprite.x = (p1.x + p2.x) / 2
  sprite.y = (p1.y + p2.y) / 2
  sprite.rotation = angleBetween(p1, p2)
  sprite.height = distance(p1, p2) * yPixelSize
  sprite.width = xPixelSize * t
  createClone()
}*/

function angleBetween(p1: float2, p2: float2): number {
  const dx = p2.x - p1.x
  const dy = p2.y - p1.y
  return Math.atan2(dx, dy)
}

function distance(p1: float2, p2: float2): number {
  const dx = p2.x - p1.x
  const dy = p2.y - p1.y
  return Math.sqrt(dx * dx + dy * dy)
}
