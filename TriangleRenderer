type float2 = { x: number; y: number }
sprite.tint = 0x00ffff
sprite.y = 0
sprite.x = 0
const xPixelSize = 2650 / Game.width
const yPixelSize = 1880 / Game.height
//sprite.width = xPixelSize * Game.width
//sprite.height = yPixelSize * Game.height
sprite.visible = true

drawTriangle(-100, -200, 0, 100, 220, 0)
//DrawQuadrilateral(0, 0, 300, 50, 200, 100, 0, 150)
//drawLine(0,0,-150,120)

function drawTriangle(
  x1: number,
  y1: number,
  x2: number,
  y2: number,
  x3: number,
  y3: number,
) {
  const ft = 0.2
  const center = centroid(x1, y1, x2, y2, x3, y3)
  sprite.setCostume("square")
  wait(ft)
  drawLine(x1, y1, x2, y2, 3)
  wait(ft)
  drawLine(x2, y2, x3, y3, 3)
  wait(ft)
  drawLine(x1, y1, x3, y3, 3)
  wait(ft)
  sprite.setCostume("triangle")
  const p1AngleToCenter = angleToCentroid(x1, y1, center.x, center.y)
  const p2AngleToCenter = angleToCentroid(x2, y2, center.x, center.y)
  const p3AngleToCenter = angleToCentroid(x3, y3, center.x, center.y)
  //p1 start
  sprite.rotation = 180+p1AngleToCenter
  sprite.height = calcMaxTriangleSizeY(p1AngleToCenter, x2, y2, x3, y3)
  sprite.width = xPixelSize * 100
  const footVecP2 = footOfPerpendicularAngle(x1, y1, x2, y2, p1AngleToCenter)
  const distanceToP2Line = Math.hypot(footVecP2.x,footVecP2.y)
  console.log(distanceToP2Line)
  
  //sprite.height = yPixelSize * 100
  sprite.x = x1
  sprite.y = y1
}

function calcMaxTriangleSizeY(
  thisAngle: number, x2: number,y2: number,x3: number,y3: number,) {
  
  return yPixelSize * 10
}

function footOfPerpendicularAngle(sx: number, sy: number, px: number, py: number, angle: number): float2 {
  const vx = Math.cos(angle)
  const vy = Math.sin(angle)
  const dx = px - sx
  const dy = py - sy
  const s = (dx * vx + dy * vy) / (vx * vx + vy * vy)
  return {
    x: sx + s * vx,
    y: sy + s * vy
  }
}

function angleToCentroid(px: number, py: number, cx: number, cy: number) {
  const dx = cx - px
  const dy = cy - py
  return Math.atan2(dx, dy) // Winkel im Bogenmaß
}

function centroid(
  x1: number,
  y1: number,
  x2: number,
  y2: number,
  x3: number,
  y3: number,
) {
  return {
    x: (x1 + x2 + x3) / 3,
    y: (y1 + y2 + y3) / 3,
  }
}

function drawLine(x1: number, y1: number, x2: number, y2: number, t: number) {
  const p1 = { x: x1, y: y1 }
  const p2 = { x: x2, y: y2 }

  sprite.x = (p1.x + p2.x) / 2
  sprite.y = (p1.y + p2.y) / 2
  sprite.rotation = angleBetween(p1, p2)
  sprite.height = distance(p1, p2) * yPixelSize
  sprite.width = xPixelSize * t
  createClone()
}

function angleBetween(p1: float2, p2: float2): number {
  const dx = p2.x - p1.x
  const dy = p2.y - p1.y
  return Math.atan2(dx, dy)
}

function distance(p1: float2, p2: float2): number {
  const dx = p2.x - p1.x
  const dy = p2.y - p1.y
  return Math.sqrt(dx * dx + dy * dy)
}

/*
function DrawQuadrilateral(
  x1: number,
  y1: number,
  x2: number,
  y2: number,
  x3: number,
  y3: number,
  x4: number,
  y4: number,
) {
  drawLine(x1, y1, x2, y2) // Seite 1
  drawLine(x2, y2, x3, y3) // Seite 2
  drawLine(x3, y3, x4, y4) // Seite 3
  drawLine(x4, y4, x1, y1) // Seite 4
  DrawTriangle(x1, y1, x2, y2, x3, y3)
  DrawTriangle(x1, y1, x3, y3, x4, y4)
}

// Beispiel: DrawTriangle-Funktion mit Sprite
function DrawTriangle(
  x1: number,
  y1: number,
  x2: number,
  y2: number,
  x3: number,
  y3: number,
) {
  // Berechne Bounding-Box für das Sprite
  const minX = Math.min(x1, x2, x3)
  const minY = Math.min(y1, y2, y3)
  const maxX = Math.max(x1, x2, x3)
  const maxY = Math.max(y1, y2, y3)

  sprite.x = minX
  sprite.y = minY
  sprite.width = maxX - minX
  sprite.height = maxY - minY
  sprite.visible = true
  createClone()
  // Hier würdest du noch die Textur-UVs anpassen, falls nötig
}*/
